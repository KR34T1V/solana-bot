// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  strategies Strategy[]
  bots      TradingBot[]
}

model Strategy {
  id             String   @id @default(cuid())
  name           String
  type           String
  config         String
  currentVersion Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  versions StrategyVersion[]
  backtests Backtest[]
  bots     TradingBot[]

  @@index([userId])
}

model StrategyVersion {
  id        String   @id @default(cuid())
  version   Int
  name      String
  type      String
  config    String
  changes   String
  createdAt DateTime @default(now())

  // Performance metrics
  performance String? // Stores metrics for different timeframes as JSON string
  backtestResults String? // Stores backtest results if any were run as JSON string
  lastTestedAt DateTime?

  // Relations
  strategy   Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  strategyId String

  @@unique([strategyId, version])
}

model Backtest {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  pair      String   // Trading pair (e.g., "SOL/USDC")
  timeframe String   // Timeframe (e.g., "1h", "4h", "1d")
  config    String   // JSON containing backtest parameters
  results   String   // JSON containing backtest results
  status    String   // PENDING, RUNNING, COMPLETED, FAILED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  strategy   Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  strategyId String

  @@index([strategyId])
}

model HistoricalPrice {
  id        String   @id @default(cuid())
  pair      String   // Trading pair (e.g., "SOL/USDC")
  timestamp DateTime
  open      Float
  high      Float
  low       Float
  close     Float
  volume    Float
  source    String   // "birdeye" or other data sources
  timeframe String   // "1m", "5m", "15m", "1h", "4h", "1d"
  createdAt DateTime @default(now())

  @@unique([pair, timestamp, timeframe])
  @@index([pair, timestamp])
  @@index([timeframe])
}

model TradingBot {
  id          String   @id @default(cuid())
  name        String
  status      String   // ACTIVE, PAUSED, STOPPED
  config      String   // JSON containing bot configuration
  lastTradeAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  strategy    Strategy  @relation(fields: [strategyId], references: [id])
  strategyId  String
  trades      Trade[]
  wallet      VirtualWallet?

  @@index([userId])
  @@index([strategyId])
}

model VirtualWallet {
  id            String   @id @default(cuid())
  balance       Float    @default(0)
  totalDeposits Float    @default(0)
  totalWithdraws Float   @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  bot          TradingBot @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId        String     @unique
  positions    Position[]
  transactions Transaction[]
}

model Position {
  id        String   @id @default(cuid())
  pair      String
  side      String   // LONG or SHORT
  size      Float
  entryPrice Float
  currentPrice Float?
  pnl       Float?
  status    String   // OPEN or CLOSED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  closedAt  DateTime?

  // Relations
  wallet    VirtualWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId  String

  @@index([walletId])
}

model Trade {
  id          String   @id @default(cuid())
  pair        String
  side        String   // BUY or SELL
  type        String   // MARKET or LIMIT
  amount      Float
  price       Float
  status      String   // PENDING, EXECUTED, FAILED, CANCELLED
  createdAt   DateTime @default(now())
  executedAt  DateTime?
  
  // Relations
  bot        TradingBot @relation(fields: [botId], references: [id], onDelete: Cascade)
  botId      String

  @@index([botId])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String   // DEPOSIT, WITHDRAW, TRADE
  amount    Float
  currency  String
  status    String   // PENDING, COMPLETED, FAILED
  metadata  String?  // Additional JSON data
  createdAt DateTime @default(now())

  // Relations
  wallet    VirtualWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId  String

  @@index([walletId])
} 